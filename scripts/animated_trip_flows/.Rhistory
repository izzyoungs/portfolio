left_join(time) %>%
group_by(activity_id) %>%
mutate(index = row_number(),
activity_id = paste0("S", activity_id),
time = case_when(index == 1 ~ start_time,
index == last(index) ~ end_time),
time = as.ITime(na.approx(time)),
time = strftime(time, format = "%H:%M")) %>%
select(-start_time, -end_time, -index)
fc_final
fc_final %>%
write_csv("points_for_animated_trips.csv")
library(tidyverse)
library(tidyverse)
library(sf)
# library(zoo)
library(glue)
library(bigrquery)
library(RPyGeo)
library(lubridate)
# Read in the road network and remove unnecessary columns
network <- st_read("road_network/Network Link Volumes_Spring_2023_Washington, DC.shp") %>%
select(linkId, geometry)
# run sql query
for_bq <- glue_sql("SELECT start_time, end_time, activity_id, network_link_ids
FROM `replica-customer.mid_atlantic.mid_atlantic_2023_Q2_thursday_trip`,
UNNEST (network_link_ids) network_link_ids
WHERE destination_bgrp LIKE '110010101002' AND mode = 'WALKING'")
# read in table
tb <- bq_project_query("replica-customer", for_bq)
# load table to data frame
df_network <- bq_table_download(tb)
# write data frame to rds for expediting script later
write_rds(df_network, "trip_data/trip_data_2023_q2_thursday.rds")
# reduce the geometry for each activity to a single linestring
geometry <- df_network %>%
full_join(network, by = c("network_link_ids" = "linkId")) %>%
st_as_sf() %>%
group_by(activity_id) %>%
summarize(geometry = st_union(geometry))
# final dataframe with all relevant columns
df <- df_network %>%
group_by(activity_id) %>%
slice(1L) %>%
select(-network_link_ids) %>%
left_join(geometry) %>%
st_as_sf()
# write to a shapefile
st_write(df, "trip_data_spatial/trip_data_2023_q2_thursday_spatial.shp")
working_dir <- getwd()
arcpy <- rpygeo_build_env(workspace = tempdir(),
path = "C:/Program Files/ArcGIS/Pro/bin/Python/envs/arcgispro-py3",
overwrite = TRUE,
extensions = "Spatial")
reticulate::use_python("C:/Program Files/ArcGIS/Pro/bin/Python/envs/arcgispro-py3")
arcpy <- reticulate::import("arcpy")
arcpy$GeneratePointsAlongLines_management(Input_Features = paste0(working_dir, "/trip_data_spatial/trip_data_2023_q2_thursday_spatial.shp"),
Output_Feature_Class = paste0(working_dir, "/points_along_lines/trip_data_2023_q2_thursday_points.shp"),
Point_Placement = "DISTANCE",
Distance = '300 feet',
Include_End_Points = "END_POINTS",
Add_Chainage_Fields = "ADD_CHAINAGE")
# Create a function that converts spatial geometry to x and y fields
sfc_as_cols <- function(x, names = c("x","y")) {
stopifnot(inherits(x,"sf") && inherits(sf::st_geometry(x),"sfc_POINT"))
ret <- sf::st_coordinates(x)
ret <- tibble::as_tibble(ret)
stopifnot(length(names) == ncol(ret))
x <- x[ , !names(x) %in% names]
ret <- setNames(ret,names)
dplyr::bind_cols(x,ret)
}
# read the new data frame back in
fc <- st_read("points_along_lines/trip_data_2023_q2_thursday_points.shp") %>%
sfc_as_cols
# get the times
time <- df %>%
st_drop_geometry() %>%
select(activity_id, start_time, end_time)
# interpolate time between points of the same activity_id
fc_final <- fc %>%
st_drop_geometry() %>%
select(activity_id = actvty_, x, y) %>%
left_join(time) %>%
group_by(activity_id) %>%
mutate(index = row_number(),
activity_id = paste0("S", activity_id), # Helps when importing to foursquare to not read the col as a numeric
time = case_when(index == 1 ~ start_time,
index == last(index) ~ end_time),
time = as.ITime(na.approx(time)),
time = strftime(time, format = "%H:%M")) %>%
select(-start_time, -end_time, -index)
library(data.table)
# interpolate time between points of the same activity_id
fc_final <- fc %>%
st_drop_geometry() %>%
select(activity_id = actvty_, x, y) %>%
left_join(time) %>%
group_by(activity_id) %>%
mutate(index = row_number(),
activity_id = paste0("S", activity_id), # Helps when importing to foursquare to not read the col as a numeric
time = case_when(index == 1 ~ start_time,
index == last(index) ~ end_time),
time = as.ITime(na.approx(time)),
time = strftime(time, format = "%H:%M")) %>%
select(-start_time, -end_time, -index)
library(zoo)
# interpolate time between points of the same activity_id
fc_final <- fc %>%
st_drop_geometry() %>%
select(activity_id = actvty_, x, y) %>%
left_join(time) %>%
group_by(activity_id) %>%
mutate(index = row_number(),
activity_id = paste0("S", activity_id), # Helps when importing to foursquare to not read the col as a numeric
time = case_when(index == 1 ~ start_time,
index == last(index) ~ end_time),
time = as.ITime(na.approx(time)),
time = strftime(time, format = "%H:%M")) %>%
select(-start_time, -end_time, -index)
?as.ITime
arcpy$GeneratePointsAlongLines_management(Input_Features = paste0(working_dir, "/trip_data_spatial/trip_data_2023_q2_thursday_spatial.shp"),
Output_Feature_Class = paste0(working_dir, "/points_along_lines/trip_data_2023_q2_thursday_points.shp"),
Point_Placement = "DISTANCE",
Distance = '100 feet',
Include_End_Points = "END_POINTS",
Add_Chainage_Fields = "ADD_CHAINAGE")
arcpy$GeneratePointsAlongLines_management(Input_Features = paste0(working_dir, "/trip_data_spatial/trip_data_2023_q2_thursday_spatial.shp"),
Output_Feature_Class = paste0(working_dir, "/points_along_lines/trip_data_2023_q2_thursday_points.shp"),
Point_Placement = "DISTANCE",
Distance = '100 feet',
Include_End_Points = "END_POINTS",
Add_Chainage_Fields = "ADD_CHAINAGE")
# Create a function that converts spatial geometry to x and y fields
sfc_as_cols <- function(x, names = c("x","y")) {
stopifnot(inherits(x,"sf") && inherits(sf::st_geometry(x),"sfc_POINT"))
ret <- sf::st_coordinates(x)
ret <- tibble::as_tibble(ret)
stopifnot(length(names) == ncol(ret))
x <- x[ , !names(x) %in% names]
ret <- setNames(ret,names)
dplyr::bind_cols(x,ret)
}
# read the new data frame back in
fc <- st_read("points_along_lines/trip_data_2023_q2_thursday_points.shp") %>%
sfc_as_cols
# get the times
time <- df %>%
st_drop_geometry() %>%
select(activity_id, start_time, end_time)
# interpolate time between points of the same activity_id
fc_final <- fc %>%
st_drop_geometry() %>%
select(activity_id = actvty_, x, y) %>%
left_join(time) %>%
group_by(activity_id) %>%
mutate(index = row_number(),
activity_id = paste0("S", activity_id), # Helps when importing to foursquare to not read the col as a numeric
time = case_when(index == 1 ~ start_time,
index == last(index) ~ end_time),
time = as.ITime(na.approx(time)),
time = strftime(time, format = "%H:%M")) %>%
select(-start_time, -end_time, -index)
fc_final %>%
write_csv("points_for_animated_trips.csv")
fc_final %>%
filter(activity_id == "S6833476656699351402")
df %>% filter(activity_id == "S6833476656699351402")
df %>% filter(activity_id == "6833476656699351402")
df %>% filter(activity_id == "6833476656699351402") %>% mapview::mapview
df %>%
filter(activity_id == "6833476656699351402")
df %>%
filter(activity_id == "6833476656699351402") %>% plot
df %>%
filter(activity_id == "6833476656699351402") %>% mapview::mapview()
df_network %>%
filter(activity_id == "6833476656699351402") %>% mapview::mapview()
df_network %>%
filter(activity_id == "6833476656699351402")
geometry %>%
filter(activity_id == "6833476656699351402")
geometry %>%
filter(activity_id == "6833476656699351402") %>%
mapview::mapview()
df_network %>%
full_join(network, by = c("network_link_ids" = "linkId")) %>%
st_as_sf() %>%
filter(activity_id == "6833476656699351402") %>%
mapview::mapview()
df_network
df_network %>%
filter(activity_id == "6833476656699351402")
network
df_network %>%
filter(activity_id == "6833476656699351402") %>%
full_join(network, by = c("network_link_ids" = "linkId"))
network
network %>% mapview::mapview()
# Read in the road network and remove unnecessary columns
network <- st_read("road_network/Network Link Volumes_Spring_2023_Washington, DC.shp") %>%
select(network_link_ids = linkId, geometry)
df_network %>%
full_join(network)
network
network %>% glimpse
df_network
df_network
df_network %>%
full_join(network)
network %>% filter(network_link_ids == "6751018629810521490")
network %>% filter(network_link_ids == "8961453451665340211")
# Read in the road network and remove unnecessary columns
network <- st_read("road_network/Network Link Volumes_Spring_2023_Washington, DC.shp") %>%
select(network_link_ids = linkId, geometry)
network %>% filter(network_link_ids == "8961453451665340211")\
network %>% filter(network_link_ids == "8961453451665340211")
dat <- read_csv("C:/Users/IYOUNGS/Downloads/bquxjob_7da07d29_18c16ee0a74.csv")
dat %>%
sf::st_as_sf(x = dat, wkt = "geometry") %>%
sf::st_set_crs(4326)
dat
dat %>%
sf::st_as_sf(wkt = "geometry")
dat %>%
sf::st_as_sf(wkt = "geometry") %>%
sf::st_set_crs(4326)
dat %>%
sf::st_as_sf(wkt = "geometry") %>%
sf::st_set_crs(4326) %>%
mapview::mapview()
# run sql query
for_bq <- glue_sql("WITH network_links  AS (
SELECT stableEdgeId, geometry
FROM `replica-customer.mid_atlantic.mid_atlantic_2023_Q2_network_segments`
),
trips AS (SELECT start_time, end_time, activity_id, network_link_ids as stableEdgeId
FROM `replica-customer.mid_atlantic.mid_atlantic_2023_Q2_thursday_trip`,
UNNEST (network_link_ids) network_link_ids
WHERE destination_bgrp = '110010101002' AND mode = 'WALKING'
)
select t.start_time, t.end_time, t.activity_id, t.stableEdgeId, n.geometry
FROM trips as t
LEFT JOIN network_links as n
ON t.stableEdgeId = n.stableEdgeId")
library(tidyverse)
library(sf)
library(glue)
library(bigrquery)
library(reticulate)
library(RPyGeo)
library(lubridate)
library(data.table)
library(zoo)
# read in table
tb <- bq_project_query("replica-customer", for_bq)
# run sql query
for_bq <- glue_sql("WITH network_links  AS (
SELECT stableEdgeId, geometry
FROM `replica-customer.mid_atlantic.mid_atlantic_2023_Q2_network_segments`
),
trips AS (SELECT start_time, end_time, activity_id, network_link_ids as stableEdgeId
FROM `replica-customer.mid_atlantic.mid_atlantic_2023_Q2_thursday_trip`,
UNNEST (network_link_ids) network_link_ids
WHERE destination_bgrp = '110010101002' AND mode = 'WALKING'
)
select t.start_time, t.end_time, t.activity_id, t.stableEdgeId, n.geometry
FROM trips as t
LEFT JOIN network_links as n
ON t.stableEdgeId = n.stableEdgeId")
# read in table
tb <- bq_project_query("replica-customer", for_bq)
# load table to data frame
df_network <- bq_table_download(tb)
df_network
df_network %>%
st_as_sf(wkt = geometry)
df_network %>%
st_as_sf(wkt = "geometry")
df_network
df_network %>%
st_as_sf(., wkt = "geometry")
df_network %>%
st_as_sf()
df_network %>%
st_as_sfc(wkt = "geometry")
df_network %>%
st_as_sf(wkt = "geometry")
df_network %>% view
df_network %>%
mutate(geometry = as.character(geometry))
df_network %>%
mutate(geometry = as.character(geometry)) %>%
st_as_sf(wkt = "geometry")
df_network %>%
mutate(geometry = as.character(geometry)) %>%
st_as_sf(wkt = "geometry") %>%
st_set_crs(4326)
df_network %>%
st_as_sf(wkt = "geometry") %>%
st_set_crs(4326)
st_as_sf(x = df_network, wkt = "geometry") %>%
st_set_crs(4326)
sf::st_as_sf(x = df_network, wkt = "geometry") %>%
st_set_crs(4326)
df_network
df_network %>%
slice(1)
df_network %>%
slice(1) %>%
st_as_sf(wkt = "geometry") %>%
st_set_crs(4326)
df_network %>%
filter(is.na(geometry))
df_network %>%
filter(is.na(geometry)) %>%
count(stableEdgeId)
# run sql query
for_bq <- glue_sql("WITH network_links  AS (
SELECT stableEdgeId, geometry
FROM `replica-customer.mid_atlantic.mid_atlantic_2022_Q2_network_segments`
),
trips AS (SELECT start_time, end_time, activity_id, network_link_ids as stableEdgeId
FROM `replica-customer.mid_atlantic.mid_atlantic_2022_Q2_thursday_trip`,
UNNEST (network_link_ids) network_link_ids
WHERE destination_bgrp = '110010101002' AND mode = 'WALKING'
)
select t.start_time, t.end_time, t.activity_id, t.stableEdgeId, n.geometry
FROM trips as t
LEFT JOIN network_links as n
ON t.stableEdgeId = n.stableEdgeId")
# read in table
tb <- bq_project_query("replica-customer", for_bq)
# run sql query
for_bq <- glue_sql("WITH network_links  AS (
SELECT stableEdgeId, geometry
FROM `replica-customer.mid_atlantic.mid_atlantic_2022_Q4_network_segments`
),
trips AS (SELECT start_time, end_time, activity_id, network_link_ids as stableEdgeId
FROM `replica-customer.mid_atlantic.mid_atlantic_2022_Q4_thursday_trip`,
UNNEST (network_link_ids) network_link_ids
WHERE destination_bgrp = '110010101002' AND mode = 'WALKING'
)
select t.start_time, t.end_time, t.activity_id, t.stableEdgeId, n.geometry
FROM trips as t
LEFT JOIN network_links as n
ON t.stableEdgeId = n.stableEdgeId")
# read in table
tb <- bq_project_query("replica-customer", for_bq)
# load table to data frame
df_network <- bq_table_download(tb)
df_network %>%
filter(is.na(geometry)) %>%
count(stableEdgeId)
df_network
df_network %>%
filter(is.na(geometry))
df_network %>%
filter(is.na(geometry)) %>%
count(stableEdgeId)
df_network %>%
filter(is.na(geometry)) %>%
count(stableEdgeId) %>%
arrange(desc(n))
# run sql query
for_bq <- glue_sql("WITH network_links  AS (
SELECT stableEdgeId, geometry
FROM `replica-customer.mid_atlantic.mid_atlantic_2023_Q2_network_segments`
),
trips AS (SELECT start_time, end_time, activity_id, network_link_ids as stableEdgeId
FROM `replica-customer.mid_atlantic.mid_atlantic_2023_Q2_thursday_trip`,
UNNEST (network_link_ids) network_link_ids
WHERE destination_bgrp = '110010101002' AND mode = 'WALKING'
)
select t.start_time, t.end_time, t.activity_id, t.stableEdgeId, n.geometry
FROM trips as t
LEFT JOIN network_links as n
ON t.stableEdgeId = n.stableEdgeId")
# read in table
tb <- bq_project_query("replica-customer", for_bq)
# load table to data frame
df_network <- bq_table_download(tb)
df_network %>%
filter(!is.na(geometry)) %>%
st_as_sf(wkt = "geometry") %>%
st_set_crs(4326)
# reduce the geometry for each activity to a single linestring
geometry <- df_network %>%
filter(!is.na(geometry)) %>%
st_as_sf(wkt = "geometry") %>%
st_set_crs(4326) %>%
group_by(activity_id) %>%
summarize(geometry = st_union(geometry))
geometry
# final dataframe with all relevant columns
df <- df_network %>%
group_by(activity_id) %>%
slice(1L) %>%
select(-network_link_ids) %>%
left_join(geometry) %>%
st_as_sf()
# final dataframe with all relevant columns
df <- df_network %>%
group_by(activity_id) %>%
slice(1L) %>%
select(-stableEdgeId) %>%
left_join(geometry) %>%
st_as_sf()
df_network
f_network %>%
group_by(activity_id) %>%
slice(1L) %>%
select(-stableEdgeId)
df_network %>%
group_by(activity_id) %>%
slice(1L) %>%
select(-stableEdgeId) %>%
left_join(geometry)
df_network %>%
group_by(activity_id) %>%
slice(1L) %>%
select(-stableEdgeId)
# final dataframe with all relevant columns
df <- df_network %>%
group_by(activity_id) %>%
slice(1L) %>%
select(-stableEdgeId, -geometry) %>%
left_join(geometry) %>%
st_as_sf()
fg
df
# write to a shapefile
st_write(df, "trip_data_spatial/trip_data_2023_q2_thursday_spatial.shp",
delete_layer = TRUE)
working_dir <- getwd()
# This will throw a warning but you need to connect to the arcgis installation of python
use_python("C:/Program Files/ArcGIS/Pro/bin/Python/envs/arcgispro-py3")
arcpy <- import("arcpy")
# generate points along lines every 100 feet for best visualization
arcpy$GeneratePointsAlongLines_management(Input_Features = paste0(working_dir, "/trip_data_spatial/trip_data_2023_q2_thursday_spatial.shp"),
Output_Feature_Class = paste0(working_dir, "/points_along_lines/trip_data_2023_q2_thursday_points.shp"),
Point_Placement = "DISTANCE",
Distance = '100 feet',
Include_End_Points = "END_POINTS",
Add_Chainage_Fields = "ADD_CHAINAGE")
# generate points along lines every 100 feet for best visualization
arcpy$GeneratePointsAlongLines_management(Input_Features = paste0(working_dir, "/trip_data_spatial/trip_data_2023_q2_thursday_spatial.shp"),
Output_Feature_Class = paste0(working_dir, "/points_along_lines/trip_data_2023_q2_thursday_points.shp"),
Point_Placement = "DISTANCE",
Distance = '100 feet',
Include_End_Points = "END_POINTS",
Add_Chainage_Fields = "ADD_CHAINAGE")
# Create a function that converts spatial geometry to x and y fields
sfc_as_cols <- function(x, names = c("x","y")) {
stopifnot(inherits(x,"sf") && inherits(sf::st_geometry(x),"sfc_POINT"))
ret <- sf::st_coordinates(x)
ret <- tibble::as_tibble(ret)
stopifnot(length(names) == ncol(ret))
x <- x[ , !names(x) %in% names]
ret <- setNames(ret,names)
dplyr::bind_cols(x,ret)
}
# read the new data frame back in
fc <- st_read("points_along_lines/trip_data_2023_q2_thursday_points.shp") %>%
sfc_as_cols
# get the times
time <- df %>%
st_drop_geometry() %>%
select(activity_id, start_time, end_time)
# interpolate time between points of the same activity_id
fc_final <- fc %>%
st_drop_geometry() %>%
select(activity_id = actvty_, x, y) %>%
left_join(time) %>%
group_by(activity_id) %>%
mutate(index = row_number(),
activity_id = paste0("S", activity_id), # Helps when importing to foursquare to not read the col as a numeric
time = case_when(index == 1 ~ start_time,
index == last(index) ~ end_time),
time = as.ITime(na.approx(time)),
time = strftime(time, format = "%H:%M")) %>%
select(-start_time, -end_time, -index)
fc_final %>%
write_csv("points_for_animated_trips.csv")
network_links <- glue_sql("SELECT stableEdgeId, geometry
FROM `replica-customer.mid_atlantic.mid_atlantic_2023_Q2_network_segments")
# read in table
tb_links <- bq_project_query("replica-customer", network_links)
network_links <- glue_sql("SELECT stableEdgeId, geometry
FROM `replica-customer.mid_atlantic.mid_atlantic_2023_Q2_network_segments`")
# read in table
tb_links <- bq_project_query("replica-customer", network_links)
# load table to data frame
df_network <- bq_table_download(tb_links)
trips <- glue_sql("SELECT start_time, end_time, activity_id, network_link_ids as stableEdgeId
FROM `replica-customer.mid_atlantic.mid_atlantic_2023_Q2_thursday_trip`,
UNNEST (network_link_ids) network_link_ids
WHERE destination_bgrp = '110010101002' AND mode = 'WALKING'")
# read in table
tb_trips <- bq_project_query("replica-customer", trips)
# load table to data frame
df_trips <- bq_table_download(tb_trips)
df_trips %>%
left_join(df_network)
trips_geo <- df_trips %>%
left_join(df_network)
trips_geo %>%
filter(is.na(geometry))
trips_geo %>%
filter(is.na(geometry)) %>%
count(stableEdgeId) %>%
arrange(desc(n))
